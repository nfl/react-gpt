var phantom = require("phantom");
var fs = require("fs");

function writeToFile(data) {
    var stream = fs.createWriteStream(process.cwd() + "/src/utils/apiList.js");
    stream.once("open", function () {
        stream.write("// DO NOT MODIFY THIS FILE MANUALLY.\n");
        stream.write("// This file is generated by `npm run update-apilist`.\n");
        stream.write("// Note that only APIs that's documented in https://developers.google.com/doubleclick-gpt/reference is officially supported.\n");
        stream.write("\n");
        Object.keys(data.apis).forEach(function (key) {
            if (key === "gpt" || key === "pubads") {
                stream.write("export const " + key + "Version = " + data.version[key] + ";\n");
            }
            stream.write("export const " + key + "API = [" + "\n");
            data.apis[key].forEach(function (item, i) {
                stream.write("\t" + JSON.stringify(item).split(",").join(", ") + (i === data.apis[key].length - 1 ? "" : ",") + "\n");
            });
            stream.write("];\n");
        });
        stream.end();
    });
}

phantom.create().then(function (ph) {
    // a hack suggested here: https://github.com/amir20/phantomjs-node/issues/292
    function checkForData() {
        ph.windowProperty("DATA").then(function (data) {
            if (data !== undefined) {
                writeToFile(data);
                ph.exit();
            } else {
                setTimeout(checkForData, 100);
            }
        });
    }

    checkForData();

    ph.createPage().then(function (page) {
        page.property("onConsoleMessage", function (msg) {
            console.log(msg);
        });
        page.property("onCallback", function (data) {
            if (data) {
                DATA = data;
                page.close();
            }
        });
        page.open(process.cwd() + "/scripts/empty.html").then(function () {
            page.includeJs("https://securepubads.g.doubleclick.net/tag/js/gpt.js").then(function () {
                setTimeout(function () {
                    page.evaluate(function () {
                        var EXCLUDES = ["constructor"].concat(Object.getOwnPropertyNames(Object.getPrototypeOf({})));
                        var adSlot;

                        function filterKeysByType(obj) {
                            var total = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
                            var filterTypes = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

                            return Object.getOwnPropertyNames(obj).filter(function (key) {
                                return (
                                    total.indexOf(key) === -1 &&
                                    EXCLUDES.indexOf(key) === -1 &&
                                    key.indexOf("_") !== 0 && // treat property starting with underscore as private
                                    key.length > 2 && // treat property with less than 2 chars as private
                                    obj.hasOwnProperty(key) &&
                                    filterTypes.length === 0 ? true : filterTypes.indexOf(typeof obj[key]) > -1
                                );
                            }).map(function (key) {
                                return [key, typeof obj[key]];
                            });
                        }

                        function aggregateApisByType(obj) {
                            var total = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
                            var filterTypes = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
                            var keys = [];
                            while (obj !== null) {
                                var _keys;
                                var arr = filterKeysByType(obj, total, filterTypes);
                                (_keys = keys).push.apply(_keys, arr);
                                obj = Object.getPrototypeOf(obj);
                            }
                            keys = [].concat(keys);
                            return keys;
                        }

                        // extracts lists of methods from each service object.
                        function extractApis(services) {
                            var filterTypes = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

                            services = Array.isArray(services) ? services : [services];
                            var apis = services.reduce(function (total, service) {
                                var obj = service.constructor === Object ? service : Object.getPrototypeOf(service);
                                var keys = aggregateApisByType(obj, total, filterTypes);
                                total.push.apply(total, keys);
                                return total;
                            }, []);

                            return apis;
                        }

                        function checkPubadsReady() {
                            if (googletag && googletag.pubadsReady) {
                                console.log("gpt version: v" + googletag.getVersion(), ", pubads version: v" + googletag.pubads().getVersion());
                                if (typeof window.callPhantom === "function") {
                                    window.callPhantom({
                                        apis: {
                                            gpt: extractApis(googletag),
                                            pubads: extractApis(googletag.pubads()),
                                            slot: extractApis(adSlot)
                                        },
                                        version: {
                                            gpt: googletag.getVersion(),
                                            pubads: googletag.pubads().getVersion()
                                        }
                                    });
                                }
                            } else {
                                setTimeout(checkPubadsReady, 50);
                            }
                        }

                        googletag.cmd.push(function () {
                            adSlot = googletag.defineSlot("/123", [0, 0]).addService(googletag.pubads());
                            googletag.enableServices();
                            checkPubadsReady();
                        });
                    });
                }, 2000);
            });
        });
    });
});
